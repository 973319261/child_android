package com.android.widgets;import android.app.Activity;import android.content.Context;import android.graphics.drawable.ColorDrawable;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnTouchListener;import android.view.ViewGroup.LayoutParams;import android.widget.PopupWindow;import com.android.utils.DateUtil;import com.android.widgets.wheel.OnWheelChangedListener;import com.android.widgets.wheel.WheelView;import com.android.widgets.wheel.adapters.NumericWheelAdapter;import com.preschool.edu.R;import org.apache.commons.lang.StringUtils;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.List;public class DateTimePicker extends PopupWindow implements OnClickListener {	public interface DateTimePickerChangedListener {		void dateTimePickerChanged(String date);	}		private Activity activity;	private View view;	private String defaultDate, minDate;	private DateTimePickerChangedListener dateTimeChangedListener;	public DateTimePicker(Activity context, DateTimePickerChangedListener dateChangedListener, String defaultDate) {		this(context, dateChangedListener, defaultDate, null);	}	public DateTimePicker(Activity context, DateTimePickerChangedListener dateChangedListener, String defaultDate, String minDate) {		super(context);		this.activity = context;		this.dateTimeChangedListener = dateChangedListener;		this.defaultDate = defaultDate;		this.minDate = minDate;		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		view = inflater.inflate(R.layout.popup_pick_date_time, null);		view.findViewById(R.id.finish_btn).setOnClickListener(this);		initDateWheelView();        this.setContentView(view);          this.setWidth(LayoutParams.MATCH_PARENT);          this.setHeight(LayoutParams.MATCH_PARENT);          this.setFocusable(true);          this.setAnimationStyle(R.style.AnimBottom);          ColorDrawable dw = new ColorDrawable(0xb0000000);          this.setBackgroundDrawable(dw);          view.setOnTouchListener(new OnTouchListener() {            public boolean onTouch(View v, MotionEvent event) {  				int height = view.findViewById(R.id.pop_layout).getTop();				int y = (int) event.getY();				if (event.getAction() == MotionEvent.ACTION_UP) {					if (y < height) {						dateChanged();						dismiss();					}				}				return true;          }        });  	}		private void dateChanged(){		if (dateTimeChangedListener != null) {			dateTimeChangedListener.dateTimePickerChanged(getCurrentDate());		}	}	@Override	public void onClick(View v) {		if (v.getId() == R.id.finish_btn) {			dateChanged();			dismiss();		}	}		private int START_YEAR = 1900, END_YEAR = 2200;	private WheelView yearWheel;	private WheelView monthWheel;	private WheelView dayWheel;	private WheelView hourWheel, minuteWheel;	private NumericWheelAdapter dayAdapter;	private Calendar cal =  Calendar.getInstance();		private String getCurrentDate() {		int year = yearWheel.getCurrentItem() + START_YEAR;		int month = monthWheel.getCurrentItem() + 1;		int day = dayWheel.getCurrentItem() + 1;		int hour = hourWheel.getCurrentItem();		int minute = minuteWheel.getCurrentItem();		return String.format("%d-%s-%s %s:%s", year, month < 10 ? "0" + month				: "" + month, day < 10 ? "0" + day : "" + day,				hour < 10 ? "0" + hour : String.valueOf(hour),				minute < 10 ? "0" + minute : String.valueOf(minute));	}		protected void initDateWheelView() {		yearWheel = (WheelView) view.findViewById(R.id.year);		monthWheel = (WheelView) view.findViewById(R.id.month);		dayWheel = (WheelView) view.findViewById(R.id.day);		hourWheel = (WheelView) view.findViewById(R.id.hour);		minuteWheel = (WheelView) view.findViewById(R.id.minute);		String[] months_big = { "1", "3", "5", "7", "8", "10", "12" };		String[] months_little = { "4", "6", "9", "11" };		final List<String> list_big = Arrays.asList(months_big);		final List<String> list_little = Arrays.asList(months_little);		try {			cal.setTime(DateUtil.REFRESH_FORMAT.parse(this.defaultDate));		} catch (Exception e) {		}		int year = cal.get(Calendar.YEAR);		int month = cal.get(Calendar.MONTH);		int day = cal.get(Calendar.DATE);		NumericWheelAdapter yearAdapter = new NumericWheelAdapter(activity, START_YEAR, END_YEAR);		yearAdapter.setTextSize(18);		yearWheel.setViewAdapter(yearAdapter);		yearWheel.setCyclic(true);		yearWheel.setCurrentItem(year - START_YEAR);				NumericWheelAdapter monthAdapter = new NumericWheelAdapter(activity, 1, 12);		monthWheel.setViewAdapter(monthAdapter);		monthAdapter.setTextSize(18);		monthWheel.setCyclic(true);		monthWheel.setCurrentItem(month);				dayWheel.setCyclic(true);		if (list_big.contains(String.valueOf(month + 1))) {			dayAdapter = new NumericWheelAdapter(activity, 1, 31);		} else if (list_little.contains(String.valueOf(month + 1))) {			dayAdapter = new NumericWheelAdapter(activity, 1, 30);		} else {			if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)				dayAdapter = new NumericWheelAdapter(activity, 1, 29);			else				dayAdapter = new NumericWheelAdapter(activity, 1, 28);		}		dayAdapter.setTextSize(18);		dayWheel.setViewAdapter(dayAdapter);		dayWheel.setCurrentItem(day - 1);				OnWheelChangedListener wheelListener = new OnWheelChangedListener() {			@Override			public void onChanged(WheelView wheel, int oldValue, int newValue) {				if (wheel == yearWheel) {					int year_num = newValue + START_YEAR;					if (list_big.contains(String.valueOf(monthWheel.getCurrentItem() + 1))) {						dayAdapter = new NumericWheelAdapter(activity, 1, 31);					} else if (list_little.contains(String.valueOf(monthWheel.getCurrentItem() + 1))) {						dayAdapter = new NumericWheelAdapter(activity, 1, 30);					} else {						if ((year_num % 4 == 0 && year_num % 100 != 0) || year_num % 400 == 0)							dayAdapter = new NumericWheelAdapter(activity, 1, 29);						else							dayAdapter = new NumericWheelAdapter(activity, 1, 28);					}					dayAdapter.setTextSize(18);					dayWheel.setViewAdapter(dayAdapter);				} else if (wheel == monthWheel) {					int month_num = newValue + 1;					if (list_big.contains(String.valueOf(month_num))) {						dayAdapter = new NumericWheelAdapter(activity, 1, 31);					} else if (list_little.contains(String.valueOf(month_num))) {						dayAdapter = new NumericWheelAdapter(activity, 1, 30);					} else {						if (((yearWheel.getCurrentItem() + START_YEAR) % 4 == 0								&& (yearWheel.getCurrentItem() + START_YEAR) % 100 != 0)								|| (yearWheel.getCurrentItem() + START_YEAR) % 400 == 0)							dayAdapter = new NumericWheelAdapter(activity, 1, 29);						else							dayAdapter = new NumericWheelAdapter(activity, 1, 28);					}					dayAdapter.setTextSize(18);					dayWheel.setViewAdapter(dayAdapter);				}				Calendar cal = Calendar.getInstance();				boolean reset = false;				if (StringUtils.isNotBlank(minDate) && minDate.compareTo(getCurrentDate()) > 0) {					cal.setTime(new Date(DateUtil.tsParseToLong(minDate)));					reset = true;				} else {					long ts = DateUtil.tsParseToLong(getCurrentDate());					reset = ts < System.currentTimeMillis();				}				if (reset) {					yearWheel.setCurrentItem(cal.get(Calendar.YEAR) - START_YEAR, true);					monthWheel.setCurrentItem(cal.get(Calendar.MONTH), true);					dayWheel.setCurrentItem(cal.get(Calendar.DATE) - 1, true);					hourWheel.setCurrentItem(cal.get(Calendar.HOUR_OF_DAY));					minuteWheel.setCurrentItem(cal.get(Calendar.MINUTE));				}				if (dateTimeChangedListener != null) {					dateTimeChangedListener.dateTimePickerChanged(getCurrentDate());				}			}		};				NumericWheelAdapter hourAdapter = new NumericWheelAdapter(activity, 0, 23, "%02d");		hourWheel.setViewAdapter(hourAdapter);		hourAdapter.setTextSize(18);		hourWheel.setCurrentItem(cal.get(Calendar.HOUR_OF_DAY));		NumericWheelAdapter minuteAdapter = new NumericWheelAdapter(activity, 0, 59, "%02d");		minuteWheel.setViewAdapter(minuteAdapter);		minuteWheel.setCurrentItem(cal.get(Calendar.MINUTE));		minuteAdapter.setTextSize(18);				yearWheel.addChangingListener(wheelListener);		monthWheel.addChangingListener(wheelListener);		dayWheel.addChangingListener(wheelListener);		hourWheel.addChangingListener(wheelListener);		minuteWheel.addChangingListener(wheelListener);	}}